<head>
<style>

html, body {
height: 100%;
margin: 0;
padding: 0;
}

body {
    background: -webkit-linear-gradient(right top, #1BCBFF , #1F51AC);
    background: -o-linear-gradient(bottom left, #1BCBFF, #1F51AC);
    background: -moz-linear-gradient(bottom left, #1BCBFF, #1F51AC);
    background: linear-gradient(to bottom left, #1BCBFF , #1F51AC);
    background-repeat: none;
    /*background: #1F51AC;*/
    /*padding-bottom: 150px;*/
    overflow: hidden;
}

#username {
	position: relative;
	float: right;
}

#invite {
	position: fixed;
	border-radius: 500px;
	width: 65px;
	height: 65px;
	background: red;
	color: white;
	font-size: 35px;
	bottom: 35px;
	right: 35px;
	text-align: center;
	line-height: 65px;
}

.sidebar {
	height: 100%;
	width: 200px;
	position: fixed;
	left: -200px;
	background: gray;
	-webkit-transition: all .5s ease;
  	transition: all .5s ease;
}

.sidetop {
	position: relative;
	width: 100%;
	height: 30px;
	background: red;
}

.sidebar.active {
	left: 0px;
}

#songList {
	position: relative;
	width: 300px;
	float: right;
	top: 100px;
}

.song {
	position: relative;
	width: 300px;
	height: 50px;
	border: 1px solid black;
	background: gray;
}

.uuid {
	position: fixed;
	top: 10px;
	left: 10px;
	color: white;
}
.menubar {
	/*position: fixed;*/
}
#ytsearch {
	position: fixed;
  width: 80%;
  height: 50px;
  margin: 0 auto;
  left: 0;
  right: 0;
  top: 0;
  font-size: 24px;
}
#add {
	position: relative;
	display: inline-block;
	float: left;
}
#enable {
  position: absolute;
  width: 300px;
  height: 100px;
  background: black;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  margin: auto;
  color: white;
  font-size: 20px;
  text-align: center;
  line-height: 100px;
}

#freq {
  position: absolute;
  width: 450px;
  height: 100px;
  left: 50px;
  top: 100px;
}
.results {
  position: relative;
  display: none;
  width: 100%;
  height: 90%;
  top: 50px;
  background: gray;
  float: left;
  overflow-y: auto;
  overflow-x: hidden;
}
.resultItem {
  position: relative;
  display: inline-block;
  margin: 10px;
  width: 125px;
  height: 175px;
  font-size: 12px;
  background: white;
}
.resultImage {
  position: relative;
  width: 100%;
  height: 50%;
  background-position: center;
  background-size: contain;
  background-repeat: no-repeat;
}
.resultTitle {
  position: relative;
  width: 100%;
  height: 50%;
  text-align: center;
}
.adding {
  height: 50px;
}
.bottomControlsContainer {
  position: fixed;
  width: 100%;
  height: 50px;
  left: 0;
  bottom: 0;
  background: white;
}
.albumArt {
  position: relative;
  display: inline-block;
  width: 10%;
  height: 100%;
  float: left;
  background-position: center;
  background-size: contain;
  background-repeat: no-repeat;
}
.songTitle {
  width: 30%;
  height: 100%;
  position: relative;
  display: inline-block;
  float: left;
}
.lastSong {
  position: relative;
  display: inline-block;
  float: left;
  width: 10%;
  height: 100%;
}
#play {
  position: relative;
  display: inline-block;
  background-position: center;
  background-size: contain;
  background-repeat: no-repeat;
  background-image: url(/images/play.jpg);
  float: left;
  width: 10%;
  height: 100%;
}
.nextSong {
  position: relative;
  display: inline-block;
  float: left;
  width: 10%;
  height: 100%;
}
#enableContainer {
  position: fixed;
  display: none;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  background: rgba(0,0,0,0.2);
  z-index: 1000;
}

</style>

</head>

<script src="/js/dependencies/sails.io.js"></script>
<script src="/js/dependencies/jquery.min.js"></script>

<div class="uuid" style="display:none;">none</div>
<div id="username" style="display:none;">will</div>

<!-- <div id="invite">+</div> -->

<input id="ytsearch" type="text">
<div class="results"></div>

<div id="enableContainer">
  <div id="enable">Join Room</div>
  <audio id="enableAudio" style="display:none;">
    <source src="/audio/enable.wav" type="audio/wav">
  </audio>
</div>

<br />
<br />
<br />
<center>

<audio id="song" style="display:none;" controls>
  <source src="" type="audio/mp3">
</audio>

<div class="bottomControlsContainer">
  <div class="albumArt"></div>
  <div class="songTitle"></div>
  <div class="lastSong"></div>
  <div id="play"></div>
  <div class="nextSong"></div>
</div>


</center>

<!-- <script src="/js/visualizer.js"></script> -->
<script src="/js/youtube.js"></script>

<script>

$('#enableContainer').click(function(){
  $('#enableAudio').get(0).play()
  $('#enableAudio').get(0).pause()
  $('#enableContainer').remove()
})

function detectmob() {
 if( navigator.userAgent.match(/Android/i)
 || navigator.userAgent.match(/webOS/i)
 || navigator.userAgent.match(/iPhone/i)
 || navigator.userAgent.match(/iPad/i)
 || navigator.userAgent.match(/iPod/i)
 || navigator.userAgent.match(/BlackBerry/i)
 || navigator.userAgent.match(/Windows Phone/i)
 || (window.innerWidth <= 800 && window.innerHeight <= 600)
 ){
    return true;
  }
 else {
    return false;
  }
}

var isMobile = detectmob()

if (isMobile){
		$('#enableContainer').show()
}

var code = null, myid = Math.floor(Math.random() * 99999)

io.socket.on('connect', function(){
	console.log((window.location.hash).replace('#', ''))
  code = (window.location.hash).replace('#', '')
	$('.uuid').text(code)
  io.socket.post('/Room/join', {code: code})
})

var low = {latency: 999999}

var pingInt = setInterval(ping, 50)

var pingct = 0

function ping(){
	var obj = {}
	obj.start = +new Date()
	io.socket.post('/Room/ping/', obj, function (data){
    var end = +new Date()
    data.latency = (end - data.start) / 2
    if (data.latency < low.latency){
    	low = data
    }
  })
	pingct++
	if (pingct > 20){
		clearInterval(pingInt)
		low.offset = low.server - low.start - low.latency
    low.id = myid
    io.socket.post('/Room/storeOffset', low)
	}
}

var open = false

$('#invite').click(function(){
	if (!open){
		$('.sidebar').css('left', '0px')
		open = true
	}
	else {
		$('.sidebar').css('left', '-200px')
		open = false
	}
})

var checkLoadedInt

player = document.getElementById('song')
// audio = context.createMediaElementSource(player);
// audio.connect(visualizer)
// audio.connect(context.destination)

io.socket.on('addSong', function(data){
  console.log('got add song message')
  $('#songList').empty()
  setTimeout(function(){
    loadSong(data.url)
  }, 1000)
})

function loadSong(url){
  player.src = url
  player.load()
}

var updateTimeInt, player, myAudio, playing = false

$('#play').click(function(){
  if (!playing){
    $(this).css('background-image', 'url(/images/pause.png)')
    playing = true
    var obj = {
      code: code,
      time: +new Date(),
      offset: low.offset,
      currentTime: player.currentTime,
      id: myid
    }

    player.play()
    io.socket.post('/Room/play', obj)
    updateTimeInt = setInterval(updateTime, 400)
  }
  else {
    $(this).css('background-image', 'url(/images/play.jpg)')
    var obj = {
      code: code,
      time: +new Date(),
      offset: low.offset,
      currentTime: player.currentTime,
      id: myid
    }
    playing = false
    player.pause()
    io.socket.post('/Room/pause', obj)
    clearInterval(updateTimeInt)
  }
})

function updateTime(){
  var obj = {
    code: code,
    time: +new Date(),
    offset: low.offset,
    currentTime: player.currentTime,
    id: myid
  }
  io.socket.post('/Room/updateTime', obj)
}

var Learn = function(){
  this.increment = 0

  this.adjust = function(status){
    if (status == 'above'){
      if (this.increment > 0)
        this.increment = 0
      this.increment -= 0.003
    }
    else if (status == 'below'){
      if (this.increment < 0)
        this.increment = 0
      this.increment += 0.003
    }
    return this.increment
  }
}

var learn = new Learn()

io.socket.on('updateTime', function (data){
  console.log('updating time')
  if (myid != data.id){
    if (isNaN(low.offset)){
      low.offset = data.offset
    }
    var offset = parseFloat(low.offset) - parseFloat(data.offset)
    var delay = parseFloat(((+new Date() - data.time + offset) / 1000).toFixed(6))
    var time = data.currentTime + delay
    console.log('low.offset: ' + low.offset)
    console.log('data.offset: ' + data.offset)
    console.log('offset: ' + offset)
    console.log('data.time: ' + data.time)
    console.log('delay: ' + delay)
    console.log('time: ' + time)

    if (player.currentTime - time < -0.015){
      console.log(parseFloat( time ) + parseFloat(learn.adjust('below')))
      player.currentTime = parseFloat( time ) + parseFloat(learn.adjust('below'))
      console.log('below')
    }
    else if (player.currentTime - time > 0.015){
      console.log(parseFloat( time ) + parseFloat(learn.adjust('above')))
      player.currentTime = parseFloat( time ) + parseFloat(learn.adjust('above'))
      console.log('above')
    }
  }
})

io.socket.on('play', function (data){
  console.log('play')
  if (myid != data.id){
    console.log('inside')
    var offset = parseFloat(low.offset) - parseFloat(data.offset)
    var delay = ((+new Date() - data.time + offset) / 1000).toFixed(6)
    console.log(delay)
    if (delay < 0)
      delay = 0

    player.currentTime = parseFloat( (player.currentTime).toFixed(6) + parseFloat(delay) )
    player.play()
    // player.start()
  }
})

io.socket.on('pause', function (data){
  console.log('pause')
  if (myid != data.id){
    player.pause()
  }
})


</script>

<script src="//apis.google.com/js/client.js?onload=ytinit"></script>
